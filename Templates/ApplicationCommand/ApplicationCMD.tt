<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ template hostSpecific="true"#>
<# var project = "ImportExport"; #>
<# var action = "FtpRegeneratePassword" ; #>
<# var controllerName = "Ftp" ; #>
<# var aggregate = "Tenant" ; #>
<# var datatype = new string [] { "UniqueId", "UniqueId"  }; #>
<# var properties = new string [] { "TouchpointUniqueId", "SectorUniqueId"}; #>
using HC.Common;
using System;

namespace HC.<#= project #>.Application.Command
{
    [Serializable]
    public class <#= action #>CMD : HC.Command
    {
        public <#= action #>CMD(
            Guid tenantUniqueId,
            Guid correlationUniqueId,
            Guid userUniqueId,<# for (int i = 0; i < properties.Length; i++)  { #>
            
            <#= datatype[i] #> <#= ToLowerCase(properties[i]) #><# if( i != properties.Length - 1) {#>, <# } #>
<#}#>)
            : base(tenantUniqueId, correlationUniqueId, userUniqueId)
        {
<# for (int i = 0; i < properties.Length; i++)  { #>
		   this.<#= properties[i] #> = <#= ToLowerCase(properties[i]) #>; 
<#}#>
        }
<# for (int i = 0; i < properties.Length; i++)  { #>
		public <#= datatype[i] #> <#= properties[i]#> { get; set; }
<#}#>
    }
}      
<#  // End of file.
  SaveOutput(action + "CMD.cs");
#>
using System.Threading.Tasks;
using HC.Common;
using FluentValidation;
using FluentValidation.Results;
using System;
using HC.<#= project #>.Infrastructure.DomainPersistence.Repository;
using HC.<#= project #>.Application.Command;

namespace HC.<#= project #>.Application.Command
{
    public class <#= action #>CV : CommandValidator<<#= action #>CMD>
    {
        private readonly <#= aggregate #>Repository repository;

        public <#= action #>CV(
            ILogger logger,
            <#= aggregate #>Repository repository
            )
            : base(logger)
        {
            // Conditions
            Condition.Requires(repository, nameof(repository)).IsNotNull();
            this.repository = repository;

            // Validation rules 
            RuleFor(x => x.TenantUniqueId)
                .NotNull()
                .NotEqual(new Guid());

            RuleFor(x => x.UserUniqueId)
                .NotNull()
                .NotEqual(new Guid());

            RuleFor(x => x.CorrelationUniqueId)
                .NotNull()
                .NotEqual(new Guid());

           // Add for each custom property rules to validate
<# for (int i = 0; i < properties.Length; i++)  { #>
		     RuleFor(x => x.<#= properties[i] #>)
                .NotNull();                
<#}#>  
        }
        public override async Task<Result> ExecuteAsync(<#= action #>CMD command, string ruleSet = null)
        {
            // Conditions
            command.Requires(nameof(command)).IsNotNull();

            // Log line
            this.Log.Debug("Validate command", command.CorrelationUniqueId.ToUniqueId(), command);

            // init result
            var result = new Result(await base.ValidateAsync(command), command.CorrelationUniqueId.ToUniqueId());

            // If fluent validation properties are valid
            if (result.IsValid)
            {
                // Log line
                this.Log.Debug("Fluent validation results are valid", command.CorrelationUniqueId.ToUniqueId());

				// Validate if we can update the aggregate !
				var aggregate = await this.repository.FindAsync(Loading.Full, command.TenantUniqueId.ToTenantUniqueId(),
                    command.UniqueId);

				if (aggregate == null)
                {
                    // Log line
                    this.Log.ValidationError("UniqueId is wrong, this <#= aggregate.ToLower() #> doesn't exist or is disabled", command.CorrelationUniqueId.ToUniqueId(), command);

                    // Add property failure to result object
                    result.AddPropertyFailure(new ValidationFailure("UniqueId", "This  <#= aggregate.ToLower() #> doenst exists"));
                }
            }
            else
            {
                // Log line
                this.Log.ValidationError("Fluent validation results are invalid", command.CorrelationUniqueId.ToUniqueId(), result);
            }

            // Log line
            this.Log.Debug("Validation is done", command.CorrelationUniqueId.ToUniqueId());

            // Return result
            return result;
        }
    }
}
<#  // End of file.
  SaveOutput(action + "CV.cs");
#>
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using HC.Common;
using HC.Common.Infrastructure.DomainPersistence;
using HC.Common.Infrastructure.RedisCache;
using HC.<#= project #>.Domain.Aggregate.<#= aggregate #>;
using HC.<#= project #>.Infrastructure.DomainPersistence.Repository;

namespace HC.<#= project #>.Application.Command
{
    public class <#= action #>CH : CommandHandler<<#= action #>CMD, <#= aggregate #>AR>
    {
        private readonly <#= aggregate #>Repository _repository;

        public <#= action #>CH(<#= aggregate #>Repository repository,
          ILogger logger,
          NServiceBusPublisher nsbPublisher,
          InMemoryDomainEventPublisher domainEventPublisher,
          IRedisCacheManager cacheManager
        )
            : base(repository, logger, nsbPublisher, domainEventPublisher, cacheManager)
        {
            this._repository = repository;
        }

        protected override async Task ExecuteAsync(<#= action #>CMD command)
        {
            // Conditions
            command.Requires(nameof(command)).IsNotNull();
            command.UserUniqueId.Requires(nameof(command.UserUniqueId)).IsNotEqualTo(new Guid());
            command.TenantUniqueId.Requires(nameof(command.TenantUniqueId)).IsNotEqualTo(new Guid());
            command.CorrelationUniqueId.Requires(nameof(command.CorrelationUniqueId)).IsNotEqualTo(new Guid());

            // Log line
            this.Log.Debug("Handle command", command.CorrelationUniqueId.ToUniqueId(), command);

            // Get the aggregate
            var aggregate = await _repository.FindAsync(Loading.Full, command.TenantUniqueId.ToTenantUniqueId(),
                command.UniqueId);

            // DO STUFF

            // Save aggregate to DB
            await this._repository.SaveAsync(command.CorrelationUniqueId.ToUniqueId(), command.UserUniqueId.ToUniqueId(), aggregate);

            // Log line
            this.Log.Debug("Handling command is done", command.CorrelationUniqueId.ToUniqueId());

        }
    }
}
<#
  // End of file.
  SaveOutput( action + "CH.cs");
  #>
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using HC.Common;
using HC.Common.UnitTesting;
using HC.Common.Infrastructure.DomainPersistence;
using HC.<#= project #>.Application.Models.InputModel;
using HC.<#= project #>.Infrastructure.DomainPersistence.Repository;
using Xunit;
using Xunit.Abstractions;

namespace HC.<#= project #>.Application.UnitTests.<#= aggregate #>
{
    public class <#= action #> : TestFixture<Startup>
    {      

        private readonly ITestOutputHelper output;       

        public <#= action #>(ITestOutputHelper output)
        {
            this.output = output;
        }
        [Fact]
        public async Task <#= action #>_ShouldReturnIsValidResult()
        {
            // Arrange
            var <#= ToLowerCase(controllerName) #>AS = Scope.Resolve<<#= controllerName #>AS>();
            var <#= aggregate.ToLower() #>Rep = Scope.Resolve<<#= aggregate #>Repository>();           
            var tenantUniqueId = Guid.Parse("");

            var model = new <#= action #>IM()
            {
                CorrelationUniqueId = Guid.NewGuid(),
                TenantUniqueId = tenantUniqueId,
<# for (int i = 0; i < properties.Length; i++)  { #>
			 <#= properties[i] #> = ,
<# } #>
            };
            // Act
            var result = await <#= ToLowerCase(controllerName) #>AS.<#= action #>(Guid.NewGuid(), model);

            // Assert
            Assert.True(result.IsValid);
        }      
    }
}
<#
  // End of file.
  SaveOutput(action + "Tests.cs");
  
  #>
using System;
using System.Data.Common;
using System.Linq;
using System.Threading.Tasks;

using HC.<#= project #>.Application.Models.InputModel;
using HC.<#= project #>.Infrastructure.DomainPersistence.Repository;
using Xunit;
using HC.Common.UnitTesting;
using Xunit.Abstractions;
namespace HC.<#= project #>.Application.IntegrationTests
{
    public class <#= action #>_IntTest : TestFixture<Startup>
    {   

        [Fact(Skip = "only manual")]
        //[Fact]
        public async Task <#= action #>_ShouldBeValid()
        {
            // Arrange
            var <#= ToLowerCase(controllerName) #>As = Scope.Resolve<<#= controllerName #>AS>();            

            var userId = Guid.Parse("88B79954-98E6-48F6-B350-ACE49D98130C");
            var tenantId = Guid.Parse("");

            var model = new <#= action #>IM()
            {
<# for (int i = 0; i < properties.Length; i++)  { #>
			 <#= properties[i] #> = ,
<# } #>
             CorrelationUniqueId = Guid.NewGuid(),           
             TenantUniqueId = tenantId
            };
            var result = await <#= ToLowerCase(controllerName) #>As.<#= action #>(userId, model);

            // Assert
            Assert.True(result.IsValid);
        }
      
    }
}
<#
  // End of file.
  SaveOutput(action + "IntTests.cs");
  
  #>
using System;
using System.Collections.Generic;
using System.Text;

namespace HC.<#= project #>.Application.Models.InputModel
{
    [Serializable]
    public class <#= action #>IM : IInputModel
    {
        public Guid CorrelationUniqueId { get; set; }
        public Guid TenantUniqueId { get; set; }
<# for (int i = 0; i < properties.Length; i++)  { #>
		public <#= datatype[i] #> <#= properties[i] #> { get; set; }
<# } #>       
    }
}


  <#
  // End of file.
  SaveOutput(action + "IM.cs");
  
  #>
using HC.Common.Presentation.Logging;
using Microsoft.AspNetCore.Mvc;
using HC.Common.Presentation.Security;
using HC.Common;
using System.Threading.Tasks;
using System;
using HC.<#= project #>.Application;
using HC.<#= project #>.Application.Models.InputModel;

namespace HC.<#= project #>.Api.Areas.API.Controllers
{
    [Route("V4.0/{cultureInfo:length(2):alpha}/tenant")]
    public class <#= controllerName #>Controller : BaseController
    {
        private readonly <#= controllerName #>AS _<#= ToLowerCase(controllerName) #>AS;

        public <#= controllerName #>Controller(
            <#= controllerName #>AS <#= ToLowerCase(controllerName) #>AS,
            GeneralExceptionHandling exception,
            ICrudLogger logger,
            ApiMembership membership)
            : base(exception, logger, membership)
        {
            _<#= ToLowerCase(controllerName) #>AS = <#= ToLowerCase(controllerName) #>AS;
        }

        [ProducesResponseType(statusCode: 200)]
        [ProducesResponseType(statusCode: 400, type: typeof(ValidationError[]))]
        [HttpPost("<#= action #>")]
        public async Task<IActionResult> <#= action #>(
            [FromRoute] string cultureInfo,
            [FromBody] <#= action #>IM model
            )
        {
            // Generate CorrelationUniqueId
            model.CorrelationUniqueId = Guid.NewGuid();

            // Handle possible exceptions
            return await this.Exception.HandleForLoggingAsync(model.CorrelationUniqueId, async () =>
            {
                 // Log request
                var sw = Log.Request(Request, UniqueId.CreateIfNotNull(this.Membership.GetToken().User.Id), UniqueId.CreateIfNotNull(model.CorrelationUniqueId), model);

                // Handle request
                var result = await this._<#= ToLowerCase(controllerName) #>AS.<#= action #>(this.Membership.GetToken().User.Id, model);

                // Return response
                if (result.IsValid)
                    return Ok();
                else
                    return BadRequest(result.Errors);
            });
        }
    }
}
 <#
  // End of file.
  SaveOutput(controllerName + "Controller.cs");
  
  #>
using HC.Common;
using HC.<#= project #>.Application.Command;
using HC.<#= project #>.Application.Models.InputModel;
using HC.<#= project #>.Application.Models.ViewModel;
using HC.<#= project #>.Application.Query;
using HC.Integration.Domain.ValueObjects;
using System;
using System.Threading.Tasks;

namespace HC.<#= project #>.Application
{
    public class <#= controllerName #>AS
    {
        private readonly ICommandProcessor<<#= action #>CMD> _<#= ToLowerCase(action) #>Processor;       

        public <#= controllerName #>AS(
            ICommandProcessor<<#= action #>CMD> <#= ToLowerCase(action) #>Processor,
          )
        {
            _<#= ToLowerCase(action) #>Processor = <#= ToLowerCase(action) #>Processor;           
        }

        public async Task<Result> <#= action #>(Guid userUniqueId , <#= action #>IM model)
        {
            // Init command processor with query + parameters
            var command =
                new <#= action #>CMD(
                    model.TenantUniqueId,
                    model.CorrelationUniqueId,
                    userUniqueId,
                    <# for (int i = 0; i < properties.Length; i++)  { #>            
            <#= datatype[i] #> <#= ToLowerCase(properties[i]) #><# if( i != properties.Length - 1) {#>, <# } #>
<#}#>);
            // Validate the command
            var result = await _<#= ToLowerCase(action) #>Processor.ValidateAsync(command);

            // If the validation of the command was succesfull
            if (result.IsValid)
                // Process the command from the persistence
                await _<#= ToLowerCase(action) #>Processor.ProcessAsync(command);
            return result;
        }      
    }
}
 <#
  // End of file.
  SaveOutput(controllerName + "AS.cs");  
  #>

<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
#>
<#+
private string ToLowerCase(string s) {
    if (s != string.Empty && char.IsUpper(s[0]))
        {
             s =  char.ToLower(s[0]) + s.Substring(1);
        }
        return s;
    }
#>
