<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ template hostSpecific="true"#>
<# var datatype = new string [] { "Text", "UniqueId" , "UniqueId" }; #>
<# var properties = new string [] { "Text", "FrameworkUniqueId"  , "CategoryUniqueId"}; #>
<# var project = "Isaac"; #>
<# var aggregate = "Alias" ; #>
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using HC.Common;
using HC.Common.Infrastructure.DomainPersistence;
using HC.Isaac.Domain.Aggregate.<#= aggregate #>;
using HC.Isaac.Infrastructure.DomainPersistence.Repository.<#= aggregate #>;

namespace HC.Isaac.Application.Command
{
    public class UpdateA<#= aggregate #>CH : CommandHandler<UpdateA<#= aggregate #>CMD, <#= aggregate #>AR>
    {
        private readonly <#= aggregate #>Repository _repository;

        public UpdateA<#= aggregate #>CH(<#= aggregate #>Repository repository)
            : base(repository)
        {
            this._repository = repository;
        }

        protected override async Task ExecuteAsync(UpdateA<#= aggregate #>CMD command)
        {
            // Conditions
            command.Requires(nameof(command)).IsNotNull();
            command.UserUniqueId.Requires(nameof(command.UserUniqueId)).IsNotEqualTo(new Guid());
            command.TenantUniqueId.Requires(nameof(command.TenantUniqueId)).IsNotEqualTo(new Guid());
            command.CorrelationUniqueId.Requires(nameof(command.CorrelationUniqueId)).IsNotEqualTo(new Guid());

            // Log line
            this.Log.Debug("Handle command", command.CorrelationUniqueId.ToUniqueId(), command);

            // Get the aggregate
            var aggregate = await _repository.FindAsync(Loading.Full, command.TenantUniqueId.ToTenantUniqueId(),
                command.UniqueId);

            // Update the aggregate
            aggregate = aggregate.Update();

            // Save aggregate to DB
            await this._repository.SaveAsync(command.CorrelationUniqueId.ToUniqueId(), command.UserUniqueId.ToUniqueId(), aggregate);

            // Log line
            this.Log.Debug("Handling command is done", command.CorrelationUniqueId.ToUniqueId());

        }
    }
}
<#
  // End of file.
  SaveOutput("UpdateA" + aggregate + "CH.cs");
  #>
using System.Threading.Tasks;
using HC.Common;
using FluentValidation;
using FluentValidation.Results;
using System;
using HC.Isaac.Infrastructure.DomainPersistence.Repository.<#= aggregate #>;
using HC.Isaac.Application.Command;

namespace HC.Isaac.Application.Command
{
    public class UpdateA<#= aggregate #>CV : CommandValidator<UpdateA<#= aggregate #>CMD>
    {
        private readonly <#= aggregate #>Repository repository;

        public UpdateA<#= aggregate #>CV(
            ILogger logger,
            <#= aggregate #>Repository repository
            )
            : base(logger)
        {
            // Conditions
            Condition.Requires(repository, nameof(repository)).IsNotNull();
            this.repository = repository;

            // Validation rules
            RuleFor(x => x.Version)
                .NotNull()
                .NotEqual(0)
                .WithSeverity(Severity.Error);

            RuleFor(x => x.UniqueId.Value)
                .NotNull()
                .NotEqual(new Guid());

            RuleFor(x => x.TenantUniqueId)
                .NotNull()
                .NotEqual(new Guid());

            RuleFor(x => x.UserUniqueId)
                .NotNull()
                .NotEqual(new Guid());

            RuleFor(x => x.CorrelationUniqueId)
                .NotNull()
                .NotEqual(new Guid());

           // Add for each custom property rules to validate
<# for (int i = 0; i < properties.Length; i++)  { #>
		     RuleFor(x => x.<#= properties[i] #>)
                .NotNull();                
<#}#>		   
           

        }
        public override async Task<Result> ExecuteAsync(UpdateA<#= aggregate #>CMD command, string ruleSet = null)
        {
            // Conditions
            command.Requires(nameof(command)).IsNotNull();

            // Log line
            this.Log.Debug("Validate command", command.CorrelationUniqueId.ToUniqueId(), command);

            // init result
            var result = new Result(await base.ValidateAsync(command), command.CorrelationUniqueId.ToUniqueId());

            // If fluent validation properties are valid
            if (result.IsValid)
            {
                // Log line
                this.Log.Debug("Fluent validation results are valid", command.CorrelationUniqueId.ToUniqueId());

				// Validate if we can update the aggregate !
				var aggregate = await this.repository.FindAsync(Loading.Full, command.TenantUniqueId.ToTenantUniqueId(),
                    command.UniqueId);

				if (aggregate == null)
                {
                    // Log line
                    this.Log.ValidationError("UniqueId is wrong, this <#= aggregate.ToLower() #> doesn't exist or is disabled", command.CorrelationUniqueId.ToUniqueId(), command);

                    // Add property failure to result object
                    result.AddPropertyFailure(new ValidationFailure("UniqueId", "This  <#= aggregate.ToLower() #> doenst exists"));
                }
            }
            else
            {
                // Log line
                this.Log.ValidationError("Fluent validation results are invalid", command.CorrelationUniqueId.ToUniqueId(), result);
            }

            // Log line
            this.Log.Debug("Validation is done", command.CorrelationUniqueId.ToUniqueId());

            // Return result
            return result;
        }
    }
}
<#
  // End of file.
  SaveOutput("UpdateA" + aggregate + "CV.cs");
  #>

using System;
using System.Collections.Generic;
using System.Text;
using HC.Common;
using HC.Integration.Domain.ValueObjects;
using Newtonsoft.Json;

namespace HC.Isaac.Application.Command
{
    [Serializable]
    public class UpdateA<#= aggregate #>CMD : HC.Command
    {
        [JsonConstructor]
        public UpdateA<#= aggregate #>CMD(
            // Default props
            Guid tenantUniqueId,
            Guid correlationUniqueId,
            Guid userUniqueId,
            long version

            // Custom props
<# for (int i = 0; i < properties.Length; i++)  { #>
		     , <#= datatype[i] #> <#= ToLowerCase(properties[i]) #>
<#}#>
			)
            : base(tenantUniqueId, correlationUniqueId, userUniqueId, version)
        {
<# for (int i = 0; i < properties.Length; i++)  { #>
		   this.<#= properties[i] #> = <#= ToLowerCase(properties[i]) #>; 
<#}#>
        }
<# for (int i = 0; i < properties.Length; i++)  { #>
		public <#= datatype[i] #> <#= properties[i]#> { get; set; }
<#}#>
    }
}

<#
  // End of file.
  SaveOutput("UpdateA" + aggregate + "CMD.cs");
  #>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
#>
<#+

     public string ToLowerCase(string str)
     {                    
         if(!string.IsNullOrEmpty(str) && str.Length > 1)
         {
             return Char.ToLowerInvariant(str[0]) + str.Substring(1);
         }
         return str;
     }
 
#>
