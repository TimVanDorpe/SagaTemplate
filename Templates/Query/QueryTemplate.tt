<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ template hostSpecific="true"#>
<# var datatype = new string [] {"UniqueId", "Text", "UniqueId" , "CaaVO" , "List<MucaaRuleVO>"}; #>
<# var properties = new string [] {"LanguageUniqueId", "Text", "DefaultCaa" , "MucaaRules"}; #>
<# var project = "Isaac"; #>
<# var aggregate = "AnnotatedWordString" ; #>
using System;
using System.Threading.Tasks;
using Xunit;

namespace HC.Isaac.Application.UnitTests.<#= aggregate #>
{
    public class <#= aggregate #>QueryTests
    {
        static <#= aggregate #>QueryTests()
        {
            if (Startup.IocConfig == null)
                Startup.IocConfig = Startup.Init();
        }       

        [Fact]
        public async Task CanGet<#= aggregate #>ById()
        {
            var service = ObjectContainer.Resolve<<#= aggregate #>AS>();

            var tenantId = Guid.Parse("17DBC831-4CF2-4BD1-B0B3-09E17D605291");
            var uniqueId = Guid.Parse("");

            var result = await service.GetById(Guid.NewGuid(), tenantId, Guid.NewGuid(), uniqueId);

            Assert.NotNull(result);
            Assert.True(result.IsValid);
        }
    }
}
<#
  // End of file.
  SaveOutput(aggregate + "QueryTest.cs");
  #>

		[ProducesResponseType(statusCode: 200, type: typeof(<#= aggregate #>DetailVM))]
        [ProducesResponseType(statusCode: 400, type: typeof(ValidationError[]))]
        [HttpGet("GetDetail/{uniqueId:guid}")]
        public async Task<IActionResult> GetDetail(
            [FromRoute] string cultureInfo,
            [FromRoute] Guid tenantUniqueId,
            [FromRoute] Guid uniqueId
        )
        {
            // Generate query id
            var queryUniqueId = UniqueId.Generate();

            // Handle possible exceptions
            return await this.Exception.HandleForLoggingAsync(queryUniqueId.Value, async () =>
            {
                // Log request
                var sw = Log.Request(Request, UniqueId.CreateIfNotNull(this.Membership.GetToken().User.Id), queryUniqueId);

                // Handle request
                var result = await this.<#= aggregate #>AS.GetById(this.Membership.GetToken().User.Id,
                    appSettings.Security.SuperTenantUniqueId,
                    queryUniqueId.Value,
                    uniqueId);
                // Log response
                Log.Response(Request, sw, queryUniqueId, result);

                // Return response
                if (result.IsValid)
                    return Ok(result.Object);
                else
                    return BadRequest(result.Errors);
            });
        }
<#
  // End of file.
  SaveOutput(aggregate + "Controller.cs");
  #>
public async Task<Result<<#= aggregate #>DetailVM>> GetById(Guid userUniqueId, Guid tenantUniqueId, Guid correlationUniqueId, Guid uniqueId)
        {
            // Init query processor with query + parameters
            var queryProcessor = new QueryProcessor<<#= aggregate #>GetByIdQRY, <#= aggregate #>DetailVM>(
                new <#= aggregate #>GetByIdQRY(
                    tenantUniqueId: tenantUniqueId,
                    correlationUniqueId: correlationUniqueId,
                    userUniqueId: userUniqueId,
                    uniqueId
                ));

            // Validate the query
            var result = await queryProcessor.ValidateAsync();

            // If the validation of the query was succesfull
            if (result.IsValid)
            {
                // Process the query from the persistence
                result.Object = await queryProcessor.ProcessAsync();
            }
            return result;
        }
		<#
  // End of file.
  SaveOutput(aggregate + "AS.cs");
  #>
using System;

namespace HC.Isaac.Application.Query
{
    public class <#= aggregate #>GetByIdQRY : HC.Query
    {
        public <#= aggregate #>GetByIdQRY(
            Guid tenantUniqueId, 
            Guid correlationUniqueId, 
            Guid userUniqueId,
            Guid uniqueId
            ) 
            : base(tenantUniqueId, correlationUniqueId, userUniqueId)
        {
            UniqueId = uniqueId;
        }

        public Guid UniqueId { get; set; }
    }
}
<#
  // End of file.
  SaveOutput(aggregate + "GetByIdQRY.cs");
  #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using AutoMapper;
using HC.Isaac.Domain.Aggregate.<#= aggregate #>;
using Newtonsoft.Json;

namespace HC.Isaac.Application.Models.ViewModel.<#= aggregate #>
{
    public class <#= aggregate #>DetailVM : IViewModel, IObjectMapper
    {
        [DataMember]
        public Guid UniqueId { get; set; }

        [DataMember]
        [JsonConverter(typeof(VersionConverter))]
        public long Version { get; set; }

        [DataMember]
        public Guid LanguageUniqueId { get; set; }

<# for (int i = 0; i < properties.Length; i++)  { #>

		[DataMember]
		public <#= datatype[i] + " " + properties[i] #> {get;set;}
<# } #>    

        public void CreateMap(IMapperConfigurationExpression config)
        {
            config.CreateMap<<#= aggregate #>AR, <#= aggregate #>DetailVM>()
                .ForMember(l => l.UniqueId, opt => opt.MapFrom(l => l.UniqueId.Value))
                .ForMember(l => l.LanguageUniqueId, opt => opt.MapFrom(l => l.Language.UniqueId.Value));
        }
    }
}
<#
  // End of file.
  SaveOutput(aggregate + "DetailVM.cs");
  #>
using System;
using System.Threading.Tasks;
using FluentValidation;
using HC.Common;
using HC.Isaac.Application.Models.ViewModel.<#= aggregate #>;

namespace HC.Isaac.Application.Query
{
    public class <#= aggregate #>GetByIdQV : QueryValidator<<#= aggregate #>GetByIdQRY, <#= aggregate #>DetailVM>
    {
		private readonly <#= aggregate #>Repository _<#= aggregate #>Repository;

        public <#= aggregate #>GetByIdQV(ILogger logger) : base(logger)
        {
			<#= aggregate #>Repository.Requires().IsNotNull();
            _<#= aggregate #>Repository = <#= aggregate #>Repository;

            // Validation rules
            RuleFor(x => x.TenantUniqueId)
                .NotNull()
                .NotEqual(new Guid());

            RuleFor(x => x.UserUniqueId)
                .NotNull()
                .NotEqual(new Guid());

            RuleFor(x => x.CorrelationUniqueId)
                .NotNull()
                .NotEqual(new Guid());

            RuleFor(x => x.UniqueId)
                .NotNull()
                .NotEqual(new Guid());
        }

        protected override async Task<Result<<#= aggregate #>DetailVM>> ExecuteAsync(<#= aggregate #>GetByIdQRY query, string ruleSet = null)
        {
            // Conditions
            Condition.Requires(query, nameof(query)).IsNotNull();

            // Log line
            this.Log.Debug("Validate query", query.CorrelationUniqueId.ToUniqueId(), query);

            // init result
            var result = new Result<<#= aggregate #>DetailVM>(await base.ValidateAsync(query));

            // If fluent validation properties are valid
            if (result.IsValid)
            {
                // Log line
                this.Log.Debug("Fluent validation results are valid", query.CorrelationUniqueId.ToUniqueId());

				if(await this._<#= aggregate #>Repository.FindAsync(Loading.Full, query.TenantUniqueId.ToTenantUniqueId(), query.UniqueId.ToUniqueId())
                == null)
                {
                    this.Log.ValidationError("UniqueId does not exist", query.CorrelationUniqueId.ToUniqueId(), query);

                    result.AddPropertyFailure("UniqueId", "This uniqueId doesn't exists");
                }

            }
            else
            {
                // Log line
                this.Log.ValidationError("Fluent validation results are invalid", query.CorrelationUniqueId.ToUniqueId(), result);
            }

            // Log line
            this.Log.Debug("Validation is done", query.CorrelationUniqueId.ToUniqueId());

            // Return result
            return result;
        }
    }
}
<#
  // End of file.
  SaveOutput(aggregate + "GetByIdQV.cs");
  #>
using System.Diagnostics;
using System.Threading.Tasks;
using HC.Common;
using HC.Common.Infrastructure.DomainPersistence;
using HC.Isaac.Application.Models.ViewModel.<#= aggregate #>;
using HC.Isaac.Domain.Aggregate.<#= aggregate #>;
using HC.Isaac.Infrastructure.DomainPersistence.Repository.<#= aggregate #>;

namespace HC.Isaac.Application.Query
{
    public class <#= aggregate #>GetByIdQH : QueryHandler<<#= aggregate #>GetByIdQRY, <#= aggregate #>DetailVM>
    {

        private readonly <#= aggregate #>Repository _<#= aggregate #>Repository;

        public <#= aggregate #>GetByIdQH(ILogger logger, <#= aggregate #>Repository <#= aggregate #>Repository) : base(logger)
        {
            <#= aggregate #>Repository.Requires().IsNotNull();

            _<#= aggregate #>Repository = <#= aggregate #>Repository;
        }

        protected override async Task<<#= aggregate #>DetailVM> ExecuteAsync(<#= aggregate #>GetByIdQRY query)
        {
            // Conditions
            query.Requires(nameof(query)).IsNotNull();

            // Log line
            this.Log.Debug("Handle query", query.CorrelationUniqueId.ToUniqueId(), query);

            // Log line
            this.Log.Debug("Execute query", query.CorrelationUniqueId.ToUniqueId());

            // Start elapse time
            var sw = Stopwatch.StartNew();

            // Execute query
            var aggregate = await this._<#= aggregate #>Repository.FindAsync(Loading.Full, query.TenantUniqueId.ToTenantUniqueId(), query.UniqueId.ToUniqueId());

            // Stop elapse time
            sw.Stop();

            // Log line
            this.Log.Debug("Executed query", query.CorrelationUniqueId.ToUniqueId(), sw.Elapsed);

            // Log line
            this.Log.Debug("Map result to VM", query.CorrelationUniqueId.ToUniqueId());

            // Map Aggregate to Viewmodel
            var result = ObjectContainer.Resolve<MappingProcessor>().Map<<#= aggregate #>AR, <#= aggregate #>DetailVM>(aggregate);

            // Log line
            this.Log.Debug("Handling query is done", query.CorrelationUniqueId.ToUniqueId());

            // Return result
            return result;
        }
    }
}
<#
  // End of file.
  SaveOutput(aggregate + "GetByIdQH.cs");
  #>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
#>
