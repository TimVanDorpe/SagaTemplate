<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ template hostSpecific="true"#>
<# var datatype = new string [] {}; #>
<# var properties = new string [] {}; #>
<# var project = "Core"; #>
<# var aggregate = "ParticipantAttributeTypeKey" ; #>
<# var action = "ParticipantAttributeTypeKeyGetAll" ; #>
<# var model = "ParticipantAttributeTypeKey" ; #>
using HC.<#= project #>.Application;
using HC.<#= project #>.Application.UnitTests;
using System;
using System.Threading.Tasks;
using NServiceBus.Testing;
using Xunit;
using HC.Common.UnitTesting;

namespace HC.<#= project #>.Application.UnitTests.<#= aggregate #>
{
    public class <#= action #>Tests
    {
        static <#= aggregate #>Tests()
        {
            if (Startup.IocConfig == null)
                Startup.IocConfig = Startup.Init();
        }       

        [Fact]
        public async Task Can<#= action #>()
        {
            var service = Scope.Resolve<<#= aggregate #>AS>();

            var tenantId = Guid.Parse("17DBC831-4CF2-4BD1-B0B3-09E17D605291");
            var uniqueId = Guid.Parse("");

            var result = await service.<#= action #>(Guid.NewGuid(), tenantId, Guid.NewGuid(), uniqueId);

            Assert.NotNull(result);
            Assert.True(result.IsValid);
        }
    }
}
<#
  // End of file.
  SaveOutput(action + "Test.cs");
  #>
 using HC.Common;
using HC.Common.Presentation.Logging;
using HC.Common.Presentation.Security;
using HC.<#= project #>.Application;
using HC.<#= project #>.Application.Models.ViewModel.<#= model #>;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace HC.<#= project #>.Api.Areas.API.Controllers
{
    [AuthorizeTenant(NeedsAdminAccess = false)]
    [Route("V4.0/{cultureInfo:length(2):alpha}/tenant/{tenantUniqueId:guid}/<#= aggregate #>")]
    public class <#= aggregate #>Controller : BaseController
    {
        private readonly <#= aggregate #>AS _<#= LowercaseFirst(aggregate) #>AS;
         private readonly AppSettings _appSettings;

        public <#= aggregate #>Controller(<#= aggregate #>AS <#= LowercaseFirst(aggregate) #>AS, GeneralExceptionHandling exception, ICrudLogger logger, ApiMembership membership , AppSettings appSettings)
            : base(exception, logger, membership)
        {
           Condition.Requires(_<#= LowercaseFirst(aggregate) #>AS, nameof(<#= LowercaseFirst(aggregate) #>AS)).IsNotNull();
           appSettings.Requires().IsNotNull();

            _<#= LowercaseFirst(aggregate) #>AS = <#= LowercaseFirst(aggregate) #>AS;
            _appSettings = appSettings;         
        }

		[ProducesResponseType(statusCode: 200, type: typeof(<#= model #>VM))]
        [ProducesResponseType(statusCode: 400, type: typeof(ValidationError[]))]
        [HttpGet("<#= action #>")]
        public async Task<IActionResult> <#= action #>(
            [FromRoute] string cultureInfo,
            [FromRoute] Guid tenantUniqueId,
            [FromRoute] <#= model #> <#= model #>IM
        )
        {
            // Generate query id
            var queryUniqueId = UniqueId.Generate();

            // Handle possible exceptions
            return await this.Exception.HandleForLoggingAsync(queryUniqueId.Value, async () =>
            {
                // Log request
                var sw = Log.Request(Request, UniqueId.CreateIfNotNull(this.Membership.GetToken().User.Id), queryUniqueId);

                // supertenant _appSettings.Security.SuperTenantUniqueId
                // Handle request
                var result = await <#= LowercaseFirst(aggregate) #>AS.<#= action #>(this.Membership.GetToken().User.Id,
                    tenantUniqueId,
                    queryUniqueId.Value,
                    <#= model #>IM);

                // Log response
                Log.Response(Request, sw, queryUniqueId, result);

                // Return response
                if (result.IsValid)
                    return Ok(result.Object);
                else
                    return BadRequest(result.Errors);
            });
        }
    }
}
<#
  // End of file.
  SaveOutput(aggregate + "Controller.cs");
  #>
using HC.Common;
using HC.<#= project #>.Application.Models.ViewModel.<#= model #>;
using HC.<#= project #>.Application.Models.InputModel.<#= model #>;
using HC.<#= project #>.Application.Query;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace HC.Core.Application
{
    public class <#= aggregate #>AS
    {
    private readonly IQueryProcessor<<#= action #>QRY, <#= model #>VM> _<#= LowercaseFirst(action) #>Processor;

     public <#= aggregate #>AS(IQueryProcessor<<#= action #>QRY, <#= model #>VM> <#= LowercaseFirst(action) #>Processor)
        {
            _<#= LowercaseFirst(action) #>Processor = <#= LowercaseFirst(action) #>Processor;
        }

public async Task<Result<<#= model #>VM>> <#= action #>(Guid userUniqueId, Guid tenantUniqueId, Guid correlationUniqueId, <#= model #>IM model)
        {
            // Init query processor with query + parameters
            var query = (
                new <#= action #>QRY(
                    tenantUniqueId: tenantUniqueId,
                    correlationUniqueId: correlationUniqueId,
                    userUniqueId: userUniqueId,
                    model
                ));

            // Validate the query
            var result = await _<#= LowercaseFirst(action) #>Processor.ValidateAsync(query);

            // If the validation of the query was succesfull
            if (result.IsValid)
            {
                // Process the query from the persistence
                result.Object = await _<#= LowercaseFirst(action) #>Processor.ProcessAsync(query);
            }
            return result;
        }
    }
}
		<#
  // End of file.
  SaveOutput(aggregate + "AS.cs");
  #>
using System;
using HC.<#= project #>.Application.Models.InputModel.<#= model #>;

namespace HC.<#= project #>.Application.Query
{
    public class <#= action #>QRY : HC.Query
    {
        public <#= action #>QRY(
            Guid tenantUniqueId, 
            Guid correlationUniqueId, 
            Guid userUniqueId,
            <#= model #>IM model
            ) 
            : base(tenantUniqueId, correlationUniqueId, userUniqueId)
        {
            <#= model #>IM = model;
        }

        public <#= model #>IM <#= model #>IM { get; set; }
    }
}
<#
  // End of file.
  SaveOutput(action + "QRY.cs");
  #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using AutoMapper;
using HC.<#= project #>.Domain.Aggregate.<#= aggregate #>;
using Newtonsoft.Json;

namespace HC.<#= project #>.Application.Models.ViewModel.<#= aggregate #>
{
    public class <#= model #>VM : IViewModel, IObjectMapper
    {
        [DataMember]
        public Guid UniqueId { get; set; }

        [DataMember]
        [JsonConverter(typeof(VersionConverter))]
        public long Version { get; set; }

<# for (int i = 0; i < properties.Length; i++)  { #>

		[DataMember]
		public <#= datatype[i] + " " + properties[i] #> { get; set; }
<# } #>    

        public void CreateMap(IMapperConfigurationExpression config)
        {
            config.CreateMap<<#= aggregate #>AR, <#= model #>VM>()
                .ForMember(l => l.UniqueId, opt => opt.MapFrom(l => l.UniqueId.Value));                
        }
    }
}
<#
  // End of file.
  SaveOutput(model + "VM.cs");
  #>
  using System;

namespace HC.<#= project #>.Application.Models.InputModel.<#= aggregate #>
{
    [Serializable]
    public class <#= model #>IM  : IInputModel
    {
      public Guid CorrelationUniqueId { get; set; }

      public Guid TenantUniqueId { get; set; }

<# for (int i = 0; i < properties.Length; i++)  { #>

		
		public <#= datatype[i] + " " + properties[i] #> { get; set; }
<# } #>           
    }
}
<#
  // End of file.
  SaveOutput(model + "IM.cs");
  #>
using System;
using System.Threading.Tasks;
using FluentValidation;
using HC.Common;
using HC.Common.Infrastructure.DomainPersistence;
using HC.<#= project #>.Application.Models.ViewModel.<#= aggregate #>;
using HC.<#= project #>.Infrastructure.DomainPersistence.Repository.<#= aggregate #>;

namespace HC.<#= project #>.Application.Query
{
    public class <#= action #>QV : QueryValidator<<#= action #>QRY, <#= model #>VM>
    {
		private readonly <#= aggregate #>Repository _<#= LowercaseFirst(aggregate) #>Repository;

        public <#= action #>QV(ILogger logger , <#= aggregate #>Repository <#= LowercaseFirst(aggregate) #>Repository) : base(logger)
        {
			<#= LowercaseFirst(aggregate) #>Repository.Requires().IsNotNull();
            _<#= LowercaseFirst(aggregate) #>Repository = <#= LowercaseFirst(aggregate) #>Repository;

            // Validation rules
            RuleFor(x => x.TenantUniqueId)
                .NotNull()
                .NotEqual(new Guid());

            RuleFor(x => x.UserUniqueId)
                .NotNull()
                .NotEqual(new Guid());

            RuleFor(x => x.CorrelationUniqueId)
                .NotNull()
                .NotEqual(new Guid());           
        }

        protected override async Task<Result<<#= model #>VM>> ExecuteAsync(<#= action #>QRY query, string ruleSet = null)
        {
            // Conditions
            Condition.Requires(query, nameof(query)).IsNotNull();

            // Log line
            this.Log.Debug("Validate query", query.CorrelationUniqueId.ToUniqueId(), query);

            // init result
            var result = new Result<<#= model #>VM>(await base.ValidateAsync(query));

            // If fluent validation properties are valid
            if (result.IsValid)
            {
                // Log line
                this.Log.Debug("Fluent validation results are valid", query.CorrelationUniqueId.ToUniqueId());

				if(await this._<#= LowercaseFirst(aggregate) #>Repository.FindAsync(Loading.Full, query.TenantUniqueId.ToTenantUniqueId(), query.UniqueId.ToUniqueId())
                == null)
                {
                    this.Log.ValidationError("UniqueId does not exist", query.CorrelationUniqueId.ToUniqueId(), query);

                    result.AddPropertyFailure("UniqueId", "This uniqueId doesn't exists");
                }

            }
            else
            {
                // Log line
                this.Log.ValidationError("Fluent validation results are invalid", query.CorrelationUniqueId.ToUniqueId(), result);
            }

            // Log line
            this.Log.Debug("Validation is done", query.CorrelationUniqueId.ToUniqueId());

            // Return result
            return result;
        }
    }
}
<#
  // End of file.
  SaveOutput(action + "QV.cs");
  #>
using System.Diagnostics;
using System.Threading.Tasks;
using HC.Common;
using HC.Common.Infrastructure.DomainPersistence;
using HC.<#= project #>.Application.Models.ViewModel.<#= aggregate #>;
using HC.<#= project #>.Domain.Aggregate.<#= aggregate #>;
using HC.<#= project #>.Infrastructure.DomainPersistence.Repository.<#= aggregate #>;

namespace HC.<#= project #>.Application.Query
{
    public class <#= action #>QH : QueryHandler<<#= action #>QRY, <#= model #>VM>
    {

        private readonly <#= aggregate #>Repository _<#= LowercaseFirst(aggregate) #>Repository;
        private readonly MappingProcessor _mappingProcessor;

        public <#= action #>QH (ILogger logger,  MappingProcessor mappingProcessor, <#= aggregate #>Repository <#= LowercaseFirst(aggregate) #>Repository) : base(logger)
        {
            <#= LowercaseFirst(aggregate) #>Repository.Requires().IsNotNull();
            mappingProcessor.Requires().IsNotNull();

            _<#= LowercaseFirst(aggregate) #>Repository = <#= LowercaseFirst(aggregate) #>Repository;
            _mappingProcessor = mappingProcessor;
        }

        protected override async Task<<#= model #>VM> ExecuteAsync(<#= action #>QRY query)
        {
            // Conditions
            query.Requires(nameof(query)).IsNotNull();

            // Log line
            this.Log.Debug("Handle query", query.CorrelationUniqueId.ToUniqueId(), query);

            // Log line
            this.Log.Debug("Execute query", query.CorrelationUniqueId.ToUniqueId());

            // Start elapse time
            var sw = Stopwatch.StartNew();

            // Execute query
            var aggregate = await this._<#= LowercaseFirst(aggregate) #>Repository.FindAsync(Loading.Full, query.TenantUniqueId.ToTenantUniqueId(), query.UniqueId.ToUniqueId());

            // Stop elapse time
            sw.Stop();

            // Log line
            this.Log.Debug("Executed query", query.CorrelationUniqueId.ToUniqueId(), sw.Elapsed);

            // Log line
            this.Log.Debug("Map result to VM", query.CorrelationUniqueId.ToUniqueId());

            // Map Aggregate to Viewmodel
           var result = _mappingProcessor.Map<<#= aggregate #>AR, <#= model #>VM>(aggregate);

            // Log line
            this.Log.Debug("Handling query is done", query.CorrelationUniqueId.ToUniqueId());

            // Return result
            return result;
        }
    }
}
<#
  // End of file.
  SaveOutput(action + "QH.cs");
  #>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
#>
<#+
public static string LowercaseFirst(string s)
    {
        // Check for empty string.
        if (string.IsNullOrEmpty(s))
        {
            return string.Empty;
        }
        // Return char and concat substring.
        return char.ToLower(s[0]) + s.Substring(1);
    }
#>
