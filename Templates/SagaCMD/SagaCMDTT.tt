<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ template hostSpecific="true"#>
<# var project = "Swatson"; #>
<# var action = "AddSectorToTouchpoint" ; #>
<# var numberSteps = 2 ; #>
<# var aggregate = "Touchpoint" ; #>
<# for (int i = 1; i < numberSteps + 1; i++)  { #>
using HC.Common;
using System;

namespace HC.<#= project #>.Processor.Saga.Command
{
    [Serializable]
    public class <#= action + i.ToString() #>CMD : HC.Command
    {
        public <#= action + i.ToString() #>CMD(
            Guid tenantUniqueId,
            Guid correlationUniqueId,
            Guid userUniqueId,
            UniqueId uniqueId           
            )
            : base(tenantUniqueId, correlationUniqueId, userUniqueId)
        {
            this.UniqueId = uniqueId;           
        }
        public UniqueId UniqueId { get; set; }     
    }
}
      
<#  // End of file.
  SaveOutput(action + i.ToString() + "CMD.cs");
  #>     
using System;
using System.Threading.Tasks;
using HC.<#= project #>.Processor.Saga.State;
using HC.Common;
using HC.Common.Processor.NSB;
using NServiceBus;
using HC.<#= project #>.Domain.Aggregate.<#= aggregate #>;
using HC.<#= project #>.Infrastructure.DomainPersistence.Repository;

namespace HC.<#= project #>.Processor.Saga.Command
{
    public class <#= action + i.ToString() #>CH : NsbMessageHandler<<#= action + i.ToString() #>CMD, <#= aggregate #>AR>
    {       

        public <#= action + i.ToString() #>CH(
            <#= aggregate #>Repository repository         
            )
             : base(repository)
        {
            // Conditions
            Condition.Requires(repository).IsNotNull();
        }

        public override async Task ExecuteAsync(<#= action + i.ToString() #>CMD command, IMessageHandlerContext context)
        {
            // Conditions
            command.Requires(nameof(command)).IsNotNull();
            command.UniqueId.Requires(nameof(command.UniqueId)).IsNotNull();
            command.UserUniqueId.Requires(nameof(command.UserUniqueId)).IsNotEqualTo(new Guid());
            command.TenantUniqueId.Requires(nameof(command.TenantUniqueId)).IsNotEqualTo(new Guid());
            command.CorrelationUniqueId.Requires(nameof(command.CorrelationUniqueId)).IsNotEqualTo(new Guid());

            // Log line
            var sw = this.Log.MessageHandlerStart( command.UserUniqueId.ToUniqueId(), command.CorrelationUniqueId.ToUniqueId(), command);

            // TODO : HANDLE IT 

           // Reply back to the saga 
           await context.SendReplyMessageAsync(command.MapToReplyMessage(), this.AppSettings.Security.Signature.Key, this.AppSettings.Security.Signature.Salt);           

            // Log line
            this.Log.MessageHandlerFinish(sw, command.CorrelationUniqueId.ToUniqueId(), command);
        }

        public override AsyncPollingInfo ConfigureAsyncPolling()
        {
            return AsyncPollingInfo.Create(
                 step: <#= i.ToString() #>,
                 total: <#= action #>State.Total,
                 message: <#= action  #>State.Step<#= i.ToString() #>);
        }
    }
}      
<#  // End of file.
  SaveOutput(action + i.ToString() + "CH.cs");
  #>   
using System.Threading.Tasks;
using HC.Common;
using HC.Common.Processor.Logging;
using FluentValidation;
using System;
using HC.<#= project #>.Infrastructure.DomainPersistence.Repository;
using FluentValidation.Results;
using HC.Common.Processor.NSB;
using HC.<#= project #>.Processor.Saga.State;

namespace HC.<#= project #>.Processor.Saga.Command
{
    public class <#= action + i.ToString() #>CV : NsbMessageValidator<<#= action + i.ToString() #>CMD>
    {
        private readonly <#= aggregate #>Repository repository;

        public <#= action + i.ToString() #>CV(
            IProcessLogger logger,
            <#= aggregate #>Repository repository
            )
            :base(logger)
        {
            // Conditions
            Condition.Requires(repository, nameof(repository)).IsNotNull();

            // Init
            this.repository = repository;

            // Validation rules     
            RuleFor(x => x.TenantUniqueId)
                .NotNull()
                .NotEqual(new Guid());

            RuleFor(x => x.UserUniqueId)
                .NotNull()
                .NotEqual(new Guid());

            RuleFor(x => x.CorrelationUniqueId)
               .NotNull()
                .NotEqual(new Guid());
        }

        public override async Task<Result> ExecuteAsync(<#= action + i.ToString() #>CMD message)
        {
            // Conditions
            Condition.Requires(message, nameof(message)).IsNotNull();

            // Log line
            var sw = this.Log.MessageValidatorStart( message.UserUniqueId.ToUniqueId(), message.CorrelationUniqueId.ToUniqueId(), message);

            // init results
            var result = new Result(await base.ValidateAsync(message), message.CorrelationUniqueId.ToUniqueId());

            // If fluent validation properties are valid
            if (result.IsValid)
            {
                // Log line
                this.Log.Debug("Fluent validation results are valid",  message.CorrelationUniqueId.ToUniqueId());
            }
            else
            {
                // Log line
                this.Log.ValidationError("Fluent validation results are invalid", message.CorrelationUniqueId.ToUniqueId(), result);
            }

            // Log line
            this.Log.MessageValidatorFinish(sw, message.CorrelationUniqueId.ToUniqueId(), message);

            // Return result
            return result;
        }

         public override AsyncPollingInfo ConfigureAsyncPolling()
        {
            return AsyncPollingInfo.Create(
                 step: <#= i.ToString() #>,
                 total: <#= action #>State.Total,
                 message: <#= action  #>State.Step<#= i.ToString() #>);
        }
    }
}

  <#  // End of file.
  SaveOutput(action + i.ToString() + "CV.cs");
  #> 
<# } #>
using HC.<#= project #>.Application.Command;
using HC.<#= project #>.Domain.Aggregate.<#= aggregate #>;
using HC.<#= project #>.Infrastructure.DomainPersistence.Repository;
using HC.<#= project #>.Processor.Command;
using HC.<#= project #>.Processor.Saga;
using HC.<#= project #>.Processor.Saga.Command;
using HC.<#= project #>.Processor.Saga.ReplyMessage;
using HC.Common;
using HC.Common.Infrastructure.DomainPersistence;
using System;
using System.Threading.Tasks;
using Xunit;
using Xunit.Abstractions;

namespace HC.<#= project #>.Processor.UnitTests
{
    public class <#= action #>E2ETests
    {
        static <#= action #>E2ETests()
        {
            if (Startup.IocConfig == null)
                Startup.IocConfig = Startup.Init();
        }

        private readonly ITestOutputHelper output;

        public <#= action #>E2ETests(ITestOutputHelper output)
        {
            this.output = output;
        }

        [Fact]
        public void <#= action #>_ShouldComplete()
        {
            // Arrange
            var appSettings = ObjectContainer.Resolve<AppSettings>();

            var command = new <#= action #>CMD(
               tenantUniqueId: Guid.Parse("424242D0-C217-4D75-81C0-D9A99439E416"),
               correlationUniqueId: Guid.NewGuid(),
               userUniqueId: Guid.NewGuid(),             
               uniqueId: UniqueId.Generate()
                );

            command.__s = command.ToJsonString().ToHmac512Signature(
                    key: appSettings.Security.Signature.Key,
                    salt: appSettings.Security.Signature.Salt
                    );

            // Act and Assert
            NServiceBus.Testing.Test.Saga<<#= action #>SAGA>()
                .ExpectSend<<#= action #>CMD>()
                .When(sagaIsInvoked: (saga, context) => saga.Handle(command, context))
                .ExpectReply<<#= action #>1RM>()
                .ExpectSend<<#= action #>2CMD>()               
                .ExpectSagaCompleted()
                ;
        }

        [Fact]
        public async Task <#= action #>Handlers_ShouldReply()
        {
            // Arrange
            var appSettings = ObjectContainer.Resolve<AppSettings>();
            var repository = ObjectContainer.Resolve<<#= aggregate #>Repository>();
            // TODO : correct tenant
            var tenantUniqueId = TenantUniqueId.Create("424242D0-C217-4D75-81C0-D9A99439E416");
            var uniqueId = UniqueId.Generate();
            var correlationId = Guid.NewGuid();
            var userId = Guid.NewGuid();

         // Act & Assert
<# for (int i = 1; i < numberSteps + 1; i++)  { #> 
         // <#= action #><#= i #>CMD
            NServiceBus.Testing.Test.Handler<NsbMessageProcessor<<#= action #><#= i #>CMD, <#= action #><#= i #>CV, <#= action #><#= i #>CH>>()
                .ExpectReply<<#= action #><#= i #>RM>(message => message.UniqueId == uniqueId)
                .OnMessage<<#= action #><#= i #>CMD>(m =>
                {
                    m.TenantUniqueId = tenantUniqueId.Value;
                    m.CorrelationUniqueId = correlationId;
                    m.UserUniqueId = userId;                  
                    m.UniqueId = uniqueId;
                    m.__s = m.ToJsonString().ToHmac512Signature(key: appSettings.Security.Signature.Key, salt: appSettings.Security.Signature.Salt);
                })
               ;
<# } #>  
        }       
    }
}
<#
  // End of file.
  SaveOutput(action + "E2ETests.cs");
  #>  


<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
#>
<#+

     public string ToCamelCase(string str)
     {                    
         if(!string.IsNullOrEmpty(str) && str.Length > 1)
         {
             return Char.ToLowerInvariant(str[0]) + str.Substring(1);
         }
         return str;
     }
 
#>
